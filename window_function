/*
 * 윈도우 함수
 * group by와 다르게 각 행을 개별적으로 유지하면서 그룹별 계산이 가능하다.
 * 주로 순위 계산, 누적 합계, 이동 평균, 백분위 계산 등에 활용된다.
 * */

SELECT
	quiz_id,
	user_id,
	score,
	RANK() OVER(PARTITION BY quiz_id ORDER BY score DESC) AS rank_value,
	DENSE_RANK() OVER (PARTITION BY quiz_id ORDER BY score DESC) AS dense_rank_value,
	ROW_NUMBER() OVER (PARTITION BY quiz_id ORDER BY score DESC) AS row_num_value
FROM quiz_attempts
WHERE quiz_id = 1;

-- over절 SQL에서 원도우 함수를 사용할 때 데이터의 특정 집합에 대해 계산을 수행하는 데 사용된다.
	-- PARTITION BY : 데이터 그룹화
-- RANK : 같은 점수일 경우 동일한 순위를 부여, 다음 순위 건너뜀
-- DENSE_RANK() : 같은 점수일 경우 동일한 순위를 부여하지만, 다음 순위를 건너뛰지 않음
-- ROW_NUMBER() : 무조건 고유한 순위 부여


/*      윈도우 함수 미션      */
-- 📌 각 강좌에서 상위 3명의 학생을 `RANK()`를 이용해 조회하세요.
SELECT
	g.user_id,
	g.course_id,
	g.final_score
FROM
(
SELECT
	user_id,
	course_id,
	final_score,
	RANK() OVER (PARTITION BY course_id ORDER BY final_score DESC) AS top_rank
FROM grades
) AS g
WHERE top_rank IN (1, 2, 3);

-- 📌 `DENSE_RANK()`를 이용해 상위 5명까지 출력하고 순위 차이를 비교하세요.
SELECT
	g.user_id,
	g.course_id,
	g.final_score
FROM
(
SELECT
	user_id,
	course_id,
	final_score,
	DENSE_RANK() OVER (PARTITION BY course_id ORDER BY final_score DESC) AS top_rank
FROM grades
) AS g
WHERE top_rank BETWEEN 1 AND 5;

-- 📌 `ROW_NUMBER()`를 이용해 학생별로 최근 응시한 퀴즈 1개만 조회하세요.
SELECT
	qa.user_id,
	qa.quiz_id,
	qa.score
FROM 
(
	SELECT
		user_id,
		quiz_id,
		score,
		ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY attempted_at DESC) AS recent_quiz
	FROM quiz_attempts
) AS qa
WHERE recent_quiz IN (1);
